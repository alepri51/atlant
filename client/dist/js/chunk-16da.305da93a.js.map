{"version":3,"sources":["webpack:///./src/components/class_layout.js","webpack:///./src/components/class_base.js","webpack:///./src/components/widgets/class_widget.js"],"names":["__webpack_exports__","extends","_widgets_class_widget__WEBPACK_IMPORTED_MODULE_0__","components","dashboard","__webpack_require__","e","then","bind","computed","[object Object]","this","layouts","current_layout","layout","route","view","component_name","document","title","getTitle","methods","watch","$vuetify.breakpoint","breakpoint","name","Object","keys","reduce","memo","key","inx","arr","split","forEach","item","$vuetify","entity","id","$options","_componentTag","loaded","events","component_id","$store","state","auth.signed","val","old","args","_actions","execute","commit","entities","auth","signed","BASE_URL","_class_base__WEBPACK_IMPORTED_MODULE_0__","widget","active","load","endpoint","method","cache","member","console","log","$socket","off","update","event","on","data","onEvent","values","raw_data","auth.member"],"mappings":"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","file":"js/chunk-16da.305da93a.js","sourcesContent":["import Widget from './widgets/class_widget';\r\n\r\nexport default {\r\n    extends: Widget,\r\n    components: {\r\n        dashboard: () => import('./dashboard')\r\n    },\r\n    computed: {\r\n        layout() {\r\n            return this.layouts[this.current_layout].layout;\r\n        },\r\n        components() {\r\n            return this.layouts[this.current_layout].components;\r\n        },\r\n        title() {\r\n            this.route.view === this.component_name && (document.title = this.getTitle());\r\n        },\r\n    },\r\n    methods: {\r\n        getTitle() {\r\n            return 'atlant.club';\r\n        }\r\n    },\r\n    watch: {\r\n        '$vuetify.breakpoint': function(breakpoint) {\r\n            this.current_layout = breakpoint.name;\r\n        },\r\n        'route': function() {\r\n            //this.title();\r\n        }\r\n    },\r\n    created() {\r\n        this.layouts = Object.keys(this.layouts).reduce((memo, key, inx, arr) => {\r\n            let keys = key.split(',');\r\n            keys.forEach(item => {\r\n                memo[item] = this.layouts[key];\r\n            });\r\n\r\n            return memo;\r\n        }, {})\r\n    },\r\n    activated() {\r\n        //debugger\r\n        //this.title && (document.title = this.title);\r\n        //this.title();\r\n        //document.title = this.title;\r\n    },\r\n    data() {\r\n        return {\r\n            current_layout: this.$vuetify.breakpoint.name,\r\n            layouts: {}\r\n        }\r\n    }\r\n}\r\n","\r\nexport default {\r\n    data() {\r\n        let [entity, id] = this.$options._componentTag.split('_');\r\n\r\n        return {\r\n            loaded: false,\r\n            events: {},\r\n            entity,\r\n            component_name: this.$options._componentTag,\r\n            component_id: id || this.$store.state.route.id\r\n        }\r\n    },\r\n    async created() {\r\n\r\n        /* if(this.auth.member) {\r\n            //console.log('REGISTER EVENT:', `${this.auth.member}:update:${this.entity}`);\r\n\r\n            this.$socket.off(this.events.update);\r\n\r\n            let update = this.$socket.on(`${this.auth.member}:update:${this.entity}`, (data) => {\r\n                //console.log('SOCKET UPDATE DATA:', data);\r\n                \r\n                this.commit('SET_ENTITIES', { method: 'GET', ...data });\r\n            });\r\n\r\n            this.events.update = update.id;\r\n        } */\r\n    },\r\n    watch: {\r\n        'auth.signed': function(val, old) {\r\n            //[0, 1].includes(val) && this.commit('RESET_CACHE');\r\n            //val === 0 && this.commit('RESET_ENTITIES');\r\n            //old === 0 && val === 1 && this.commit('RESET_ENTITIES');\r\n        }\r\n    },\r\n    methods: {\r\n        execute(...args) {\r\n            return this.$store._actions.execute[0](...args);\r\n        },\r\n        commit(...args) {\r\n            return this.$store.commit(...args);\r\n        },\r\n        registerComponent(name) {\r\n            this.commit('REGISTER_COMPONENT', name);\r\n        }\r\n    },\r\n    computed: {\r\n        state() {\r\n            return this.$store.state;\r\n        },\r\n        entities() {\r\n            return this.$store.state.entities;\r\n        },\r\n        auth() {\r\n            return this.state.auth || {};\r\n        },\r\n        authenticated() {\r\n            //debugger;\r\n            return this.auth ? this.auth.signed && this.auth.signed !== 0 : false;\r\n        },\r\n        route() {\r\n            return this.state.route;\r\n        },\r\n        BASE_URL() {\r\n            return this.state.BASE_URL;\r\n        }\r\n    }\r\n}\r\n\r\n","import Base from '../class_base';\r\nimport {Cache} from 'axios-extensions';\r\n//import widget from './widgets/widget';\r\n\r\nexport default {\r\n    extends: Base,\r\n    components: {\r\n        widget: () => import('./widget')\r\n    },\r\n    data() {\r\n        return {\r\n            active: false\r\n        }\r\n    },\r\n    activated() {\r\n        //console.log('activated', this.entity);\r\n        this.active = true;\r\n        this.load();\r\n    },\r\n    deactivated() {\r\n        //console.log('deactivated', this.entity);\r\n        this.active = false;\r\n        //this.load();\r\n    },\r\n    methods: {\r\n        load() {\r\n            //debugger;\r\n            //console.log('LOADING:', this.entity);\r\n            this.active && this.execute({ endpoint: this.endpoint, method: 'get', cache: this.cache }); \r\n\r\n            if(this.auth.signed === 1 && this.auth.member) {\r\n                console.log('REGISTER EVENT:', `${this.auth.member}:update:${this.entity}`);\r\n\r\n                this.$socket.off(this.events.update);\r\n\r\n                let event = `${this.auth.member}:update:${this.entity}`;\r\n                let update = this.$socket.on(event, (data) => {\r\n                    //debugger\r\n                    this.onEvent(data);\r\n\r\n                });\r\n\r\n                this.events.update = event;\r\n            }\r\n        },\r\n        onEvent(data) {\r\n            console.log('SOCKET UPDATE DATA:', data);\r\n                    \r\n            this.commit('SET_ENTITIES', { method: 'GET', ...data });\r\n        }\r\n    },\r\n    computed: {\r\n        cache() {\r\n            return true;\r\n        },\r\n        endpoint() {\r\n            return `${this.entity}${ this.component_id ? ':' + this.component_id : '' }`;\r\n        },\r\n        raw_data() {\r\n            return this.$store.state.entities[this.entity] ? Object.values(this.$store.state.entities[this.entity]) : [];\r\n        },\r\n        filter() {\r\n            return this.raw_data; //переопределить в компоненте если надо фильтровать данные\r\n        }\r\n    },\r\n    watch: {\r\n        'auth.signed': function(val, old) {\r\n            //console.log(`SIGN CHANGED on ${this.entity} from:`, old, 'TO:', val, 'EVENT');\r\n            //val < old && this.load();\r\n\r\n            //this.commit('RESET_CACHE');\r\n            val === 1 && this.load();\r\n            /* val === 1 && this.load();\r\n\r\n            if(val === 1 && this.auth.member) {\r\n                console.log('REGISTER EVENT:', `${this.auth.member}:update:${this.entity}`);\r\n\r\n                this.$socket.off(this.events.update);\r\n\r\n                let update = this.$socket.on(`${this.auth.member}:update:${this.entity}`, (data) => {\r\n                    //debugger\r\n                    this.onEvent(data);\r\n\r\n                });\r\n\r\n                this.events.update = update.id;\r\n            } */\r\n        },\r\n        'auth.member': function(val, old) {\r\n            //console.log(`${this.entity} MEMBER CHANGED from:`, old, 'TO:', val);\r\n            !val && this.$socket.off(this.events.update);\r\n        }\r\n    }\r\n}"],"sourceRoot":""}