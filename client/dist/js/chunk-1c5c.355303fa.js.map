{"version":3,"sources":["webpack:///./src/components/class_base.js","webpack:///./src/components/widgets/class_widget.js"],"names":["__webpack_exports__","[object Object]","entity","id","this","$options","_componentTag","split","loaded","events","component_name","component_id","$store","state","route","watch","auth.signed","val","old","methods","args","_actions","execute","commit","name","computed","entities","auth","signed","BASE_URL","extends","_class_base__WEBPACK_IMPORTED_MODULE_0__","components","widget","__webpack_require__","e","then","bind","active","load","endpoint","method","cache","member","console","log","$socket","off","update","event","on","data","onEvent","Object","values","raw_data","auth.member"],"mappings":"0HACAA,EAAA,YACAC,OACA,IAAAC,EAAAC,GAAAC,KAAAC,SAAAC,cAAAC,MAAA,KAEA,OACAC,QAAA,EACAC,UACAP,SACAQ,eAAAN,KAAAC,SAAAC,cACAK,aAAAR,GAAAC,KAAAQ,OAAAC,MAAAC,MAAAX,KAGAF,kBAgBAc,OACAC,cAAA,SAAAC,EAAAC,MAMAC,SACAlB,WAAAmB,GACA,OAAAhB,KAAAQ,OAAAS,SAAAC,QAAA,MAAAF,IAEAnB,UAAAmB,GACA,OAAAhB,KAAAQ,OAAAW,UAAAH,IAEAnB,kBAAAuB,GACApB,KAAAmB,OAAA,qBAAAC,KAGAC,UACAxB,QACA,OAAAG,KAAAQ,OAAAC,OAEAZ,WACA,OAAAG,KAAAQ,OAAAC,MAAAa,UAEAzB,OACA,OAAAG,KAAAS,MAAAc,UAEA1B,gBAEA,QAAAG,KAAAuB,OAAAvB,KAAAuB,KAAAC,QAAA,IAAAxB,KAAAuB,KAAAC,SAEA3B,QACA,OAAAG,KAAAS,MAAAC,OAEAb,WACA,OAAAG,KAAAS,MAAAgB,sEC7DA7B,EAAA,YACA8B,QAAAC,EAAA,WACAC,YACAC,OAAA,IAAAC,EAAAC,EAAA,cAAAC,KAAAF,EAAAG,KAAA,eAEApC,OACA,OACAqC,QAAA,IAGArC,YAEAG,KAAAkC,QAAA,EACAlC,KAAAmC,QAEAtC,cAEAG,KAAAkC,QAAA,GAGAnB,SACAlB,OAKA,GAFAG,KAAAkC,QAAAlC,KAAAkB,SAAyCkB,SAAApC,KAAAoC,SAAAC,OAAA,MAAAC,MAAAtC,KAAAsC,QAEzC,IAAAtC,KAAAuB,KAAAC,QAAAxB,KAAAuB,KAAAgB,OAAA,CACAC,QAAAC,IAAA,qBAAkDzC,KAAAuB,KAAAgB,iBAA2BvC,KAAAF,UAE7EE,KAAA0C,QAAAC,IAAA3C,KAAAK,OAAAuC,QAEA,IAAAC,KAA+B7C,KAAAuB,KAAAgB,iBAA2BvC,KAAAF,SAC1DE,KAAA0C,QAAAI,GAAAD,EAAAE,IAEA/C,KAAAgD,QAAAD,KAIA/C,KAAAK,OAAAuC,OAAAC,IAGAhD,QAAAkD,GACAP,QAAAC,IAAA,sBAAAM,GAEA/C,KAAAmB,OAAA,gBAAyCkB,OAAA,SAAAU,MAGzC1B,UACAxB,QACA,UAEAA,WACA,SAAsBG,KAAAF,SAAcE,KAAAO,aAAA,IAAAP,KAAAO,aAAA,MAEpCV,WACA,OAAAG,KAAAQ,OAAAC,MAAAa,SAAAtB,KAAAF,QAAAmD,OAAAC,OAAAlD,KAAAQ,OAAAC,MAAAa,SAAAtB,KAAAF,aAEAD,SACA,OAAAG,KAAAmD,WAGAxC,OACAC,cAAA,SAAAC,EAAAC,GAKA,IAAAD,GAAAb,KAAAmC,QAiBAiB,cAAA,SAAAvC,EAAAC,IAEAD,GAAAb,KAAA0C,QAAAC,IAAA3C,KAAAK,OAAAuC","file":"js/chunk-1c5c.355303fa.js","sourcesContent":["\r\nexport default {\r\n    data() {\r\n        let [entity, id] = this.$options._componentTag.split('_');\r\n\r\n        return {\r\n            loaded: false,\r\n            events: {},\r\n            entity,\r\n            component_name: this.$options._componentTag,\r\n            component_id: id || this.$store.state.route.id\r\n        }\r\n    },\r\n    async created() {\r\n\r\n        /* if(this.auth.member) {\r\n            //console.log('REGISTER EVENT:', `${this.auth.member}:update:${this.entity}`);\r\n\r\n            this.$socket.off(this.events.update);\r\n\r\n            let update = this.$socket.on(`${this.auth.member}:update:${this.entity}`, (data) => {\r\n                //console.log('SOCKET UPDATE DATA:', data);\r\n                \r\n                this.commit('SET_ENTITIES', { method: 'GET', ...data });\r\n            });\r\n\r\n            this.events.update = update.id;\r\n        } */\r\n    },\r\n    watch: {\r\n        'auth.signed': function(val, old) {\r\n            //[0, 1].includes(val) && this.commit('RESET_CACHE');\r\n            //val === 0 && this.commit('RESET_ENTITIES');\r\n            //old === 0 && val === 1 && this.commit('RESET_ENTITIES');\r\n        }\r\n    },\r\n    methods: {\r\n        execute(...args) {\r\n            return this.$store._actions.execute[0](...args);\r\n        },\r\n        commit(...args) {\r\n            return this.$store.commit(...args);\r\n        },\r\n        registerComponent(name) {\r\n            this.commit('REGISTER_COMPONENT', name);\r\n        }\r\n    },\r\n    computed: {\r\n        state() {\r\n            return this.$store.state;\r\n        },\r\n        entities() {\r\n            return this.$store.state.entities;\r\n        },\r\n        auth() {\r\n            return this.state.auth || {};\r\n        },\r\n        authenticated() {\r\n            //debugger;\r\n            return this.auth ? this.auth.signed && this.auth.signed !== 0 : false;\r\n        },\r\n        route() {\r\n            return this.state.route;\r\n        },\r\n        BASE_URL() {\r\n            return this.state.BASE_URL;\r\n        }\r\n    }\r\n}\r\n\r\n","import Base from '../class_base';\r\nimport {Cache} from 'axios-extensions';\r\n//import widget from './widgets/widget';\r\n\r\nexport default {\r\n    extends: Base,\r\n    components: {\r\n        widget: () => import('./widget')\r\n    },\r\n    data() {\r\n        return {\r\n            active: false\r\n        }\r\n    },\r\n    activated() {\r\n        //console.log('activated', this.entity);\r\n        this.active = true;\r\n        this.load();\r\n    },\r\n    deactivated() {\r\n        //console.log('deactivated', this.entity);\r\n        this.active = false;\r\n        //this.load();\r\n    },\r\n    methods: {\r\n        load() {\r\n            //debugger;\r\n            //console.log('LOADING:', this.entity);\r\n            this.active && this.execute({ endpoint: this.endpoint, method: 'get', cache: this.cache }); \r\n\r\n            if(this.auth.signed === 1 && this.auth.member) {\r\n                console.log('REGISTER EVENT:', `${this.auth.member}:update:${this.entity}`);\r\n\r\n                this.$socket.off(this.events.update);\r\n\r\n                let event = `${this.auth.member}:update:${this.entity}`;\r\n                let update = this.$socket.on(event, (data) => {\r\n                    //debugger\r\n                    this.onEvent(data);\r\n\r\n                });\r\n\r\n                this.events.update = event;\r\n            }\r\n        },\r\n        onEvent(data) {\r\n            console.log('SOCKET UPDATE DATA:', data);\r\n                    \r\n            this.commit('SET_ENTITIES', { method: 'GET', ...data });\r\n        }\r\n    },\r\n    computed: {\r\n        cache() {\r\n            return true;\r\n        },\r\n        endpoint() {\r\n            return `${this.entity}${ this.component_id ? ':' + this.component_id : '' }`;\r\n        },\r\n        raw_data() {\r\n            return this.$store.state.entities[this.entity] ? Object.values(this.$store.state.entities[this.entity]) : [];\r\n        },\r\n        filter() {\r\n            return this.raw_data; //переопределить в компоненте если надо фильтровать данные\r\n        }\r\n    },\r\n    watch: {\r\n        'auth.signed': function(val, old) {\r\n            //console.log(`SIGN CHANGED on ${this.entity} from:`, old, 'TO:', val, 'EVENT');\r\n            //val < old && this.load();\r\n\r\n            //this.commit('RESET_CACHE');\r\n            val === 1 && this.load();\r\n            /* val === 1 && this.load();\r\n\r\n            if(val === 1 && this.auth.member) {\r\n                console.log('REGISTER EVENT:', `${this.auth.member}:update:${this.entity}`);\r\n\r\n                this.$socket.off(this.events.update);\r\n\r\n                let update = this.$socket.on(`${this.auth.member}:update:${this.entity}`, (data) => {\r\n                    //debugger\r\n                    this.onEvent(data);\r\n\r\n                });\r\n\r\n                this.events.update = update.id;\r\n            } */\r\n        },\r\n        'auth.member': function(val, old) {\r\n            //console.log(`${this.entity} MEMBER CHANGED from:`, old, 'TO:', val);\r\n            !val && this.$socket.off(this.events.update);\r\n        }\r\n    }\r\n}"],"sourceRoot":""}